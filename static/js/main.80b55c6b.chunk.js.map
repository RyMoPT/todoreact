{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","taskList","isNightModeOn","id","console","log","updatedList","this","filter","item","setState","e","target","preventDefault","Math","random","value","slice","list","push","key","document","body","className","onClick","icon","faMoon","data-task-form","onSubmit","addItem","type","placeholder","onChange","updateInput","maxLength","data-task-form-input","required","data-task-list","map","deleteItem","faTrash","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SA8IeA,E,kDAvIb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAO,CACVC,QAAQ,GACRC,SAAS,GACTC,eAAe,GALD,E,uDAYPC,GACTC,QAAQC,IAAIF,GACZ,IAEMG,EAFI,YAAOC,KAAKR,MAAME,UAEHO,QAAO,SAAAC,GAAI,OAAIA,EAAKN,KAAMA,KAEnDI,KAAKG,SAAS,CACZT,SAAUK,M,8BAKNK,GAENP,QAAQC,IAAIE,KAAKT,OACjBM,QAAQC,IAAIM,EAAEC,QACdD,EAAEE,iBAGF,IAAMb,EAAU,CACdG,GAAI,EAAIW,KAAKC,SACbC,MAAOT,KAAKR,MAAMC,QAAQiB,SAGtBC,EAAI,YAAOX,KAAKR,MAAME,UAC5BG,QAAQC,IAAIa,GAEZA,EAAKC,KAAKnB,GACVI,QAAQC,IAAIa,GAEZd,QAAQC,IAAIE,KAAKR,MAAMmB,MACvBX,KAAKG,SAAS,CACZT,SAAUiB,EACVlB,QAAS,O,kCAIDoB,EAAKJ,GACfT,KAAKG,SAAL,eACGU,EAAKJ,M,+BAGD,IAAD,OAIR,OAHeK,SAASC,KACjBC,UAAYhB,KAAKR,MAAMG,cAAgB,YAAc,GAG1D,6BAEE,yBACAqB,UACEhB,KAAKR,MAAMG,cAAgB,cAAgB,UAG7C,yCAEE,4BAAQqB,UAAW,iBAAiBC,QAAU,kBAAK,EAAKd,SAAS,CAC/DR,eAAgB,EAAKH,MAAMG,kBAE3B,6BAAK,kBAAC,IAAD,CAAiBuB,KAAMC,UAMhC,yBAAKH,UACHhB,KAAKR,MAAMG,cAAgB,eAAiB,WAIhD,yBAAKqB,UACDhB,KAAKR,MAAMG,cAAgB,qBAAuB,iBAEtD,yBAAKqB,UAAU,uBAEX,0BACAA,UAAU,WACVI,kBAAA,EACAC,SAAU,SAACjB,GAAD,OAAM,EAAKkB,QAAQlB,KACzB,2BAAOmB,KAAK,OACZP,UAAU,gBACVQ,YAAY,0BACZf,MAAST,KAAKR,MAAMC,QACpBgC,SAAa,SAAArB,GAAC,OAAI,EAAKsB,YAAY,UAAWtB,EAAEC,OAAOI,QACvDkB,UAAU,KAAMC,wBAAA,EAChBC,UAAQ,IAER,2BAAON,KAAK,SACZP,UAAU,gBACVP,MAAM,cAId,wBAAIO,UAAU,WAAWc,kBAAA,GACtB9B,KAAKR,MAAME,SAASqC,KAAI,SAAA7B,GACvB,OACE,wBAAIW,IAAKX,EAAKN,IACZ,2BAAOoB,UAAU,kBACf,2BAAOO,KAAK,WAAWP,UAAU,aAC/B,0BAAMA,UAAU,cAChB,8BAAOd,EAAKO,MACZ,4BACJO,UAAU,WACVC,QAAW,kBAAK,EAAKe,WAAW9B,EAAKN,MACnC,kBAAC,IAAD,CAAiBsB,KAAMe,sB,GArHnBC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAAS8B,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.80b55c6b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { faMoon } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      newItem:\"\",\n      taskList:[],\n      isNightModeOn: false\n    }\n    // this.addItem = this.addItem.bind(this);\n\n  }\n\n  \n  deleteItem(id) {\n    console.log(id);\n    const list = [...this.state.taskList];\n\n    const updatedList = list.filter(item => item.id !==id)\n\n    this.setState({\n      taskList: updatedList,\n    })\n\n  }\n\n  addItem(e) {\n    \n    console.log(this.props)\n    console.log(e.target)\n    e.preventDefault();\n\n    // this.props.preventDefault();\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    }\n\n    const list = [...this.state.taskList];\n    console.log(list)\n\n    list.push(newItem)\n    console.log(list)\n\n    console.log(this.state.list)\n    this.setState({\n      taskList: list,\n      newItem: \"\"\n    });\n  }\n  \n  updateInput(key, value) {\n    this.setState({\n      [key]:value\n    })\n  }\n  render(){\n    const body = document.body;\n    body.className = this.state.isNightModeOn ? \"bodyNight\" : \"\";\n\n  return (\n    <div>\n\n      <div \n      className={\n        this.state.isNightModeOn ? \"headerNight\" : \"header\"\n      }\n      >\n      <h1>\n        To Do List\n        <button className= \"toggleNightBtn\" onClick={ () =>this.setState({\n          isNightModeOn: !this.state.isNightModeOn,\n        })}>      \n          <div><FontAwesomeIcon icon={faMoon}/></div>\n        </button>\n        \n        </h1>\n      </div>\n\n      <div className={\n        this.state.isNightModeOn ? \"wrapperNight\" : \"wrapper\"\n      }>\n\n    \n    <div className={\n        this.state.isNightModeOn ? \"taskContainerNight\" : \"taskContainer\"\n      } >\n    <div className=\"content-right-group\">\n\n        <form \n        className=\"taskForm\" \n        data-task-form\n        onSubmit={(e)=> this.addItem(e)}>\n            <input type=\"text\" \n            className=\"taskFormInput\" \n            placeholder=\"What do you need to do?\" \n            value = {this.state.newItem}\n            onChange = { e => this.updateInput(\"newItem\", e.target.value)}\n            maxLength=\"32\"  data-task-form-input \n            required \n            />\n            <input type=\"submit\" \n            className=\"submitTaskBtn\" \n            value=\"Add Task\" \n            \n            />\n        </form>\n    <ul className=\"itemList\" data-task-list>\n      {this.state.taskList.map(item => {\n        return (\n          <li key={item.id}>\n            <label className='labelContainer'>\n              <input type='checkbox' className='checkbox'/>\n                <span className='checkmark'></span>\n                <span>{item.value}\n                <button \n            className=\"trashBtn\"\n            onClick = {()=> this.deleteItem(item.id)}>\n              <FontAwesomeIcon icon={faTrash} />\n            </button>\n                </span>\n            </label>\n          \n          </li>\n        )\n      })}\n    </ul>\n    </div> \n</div>\n\n{/* end of wrapper */}\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}